using System;
using System.Linq;
using System.Threading.Tasks;

using set_basic_aspnet_mvc.Domain.Entities;
using set_basic_aspnet_mvc.Domain.Repositories;
using set_basic_aspnet_mvc.Helpers;

namespace set_basic_aspnet_mvc.Domain.Services
{
    public interface IUserService
    {        
        //Task<List<User>> GetAll(int page, int latestId);
        //Task<List<User>> GetAllByRoleId(int roleId, int page, int latestId);

        Task<object> Create(string fullName, string email, string password, int roleId, string language);
        Task<bool> Authenticate(string email, string password);
        Task<bool> ChangeStatus(int userId, int updatedBy, bool isActive);

        Task<bool> IsEmailExists(string email);

        Task<User> Get(int id);
        Task<User> GetByEmail(string email);
    }

    public class UserService : IUserService
    {
        const int LOGIN_TRY_COUNT = 5;

        private readonly IRepository<User> _userRepo;
        public UserService(IRepository<User> userRepo)
        {
            _userRepo = userRepo;
        }

        public async Task<object> Create(string fullName, string email, string password, int roleId, string language)
        {
            var img = GravatarHelper.GetGravatarURL(email, 55, "mm");
            var user = new User
            {
                Email = email,
                FullName = fullName,
                PasswordHash = BCrypt.Net.BCrypt.HashPassword(password),
                ImageUrl = img,
                RoleId = roleId,
                RoleName = SetRole.GetString(roleId),
                IsActive = true,
                Language = language
            };                                   

            _userRepo.Create(user);

            if (!_userRepo.SaveChanges()) return null;

            return await Task.FromResult(user.Id);
        }

        public Task<bool> Authenticate(string email, string password)
        {
            if (string.IsNullOrEmpty(password) && email.IsEmail()) return Task.FromResult(false);

            var user = _userRepo.FindOne(x => x.Email == email 
                                              && x.PasswordHash != null 
                                              && x.LoginTryCount < LOGIN_TRY_COUNT);
            if (user == null) return Task.FromResult(false);

            var result = false;

            if (BCrypt.Net.BCrypt.Verify(password, user.PasswordHash)
                && user.LoginTryCount < LOGIN_TRY_COUNT)
            {
                user.LastLoginAt = DateTime.Now;
                user.LoginTryCount = 0;
                result = true;
            }
            else
            {
                user.LoginTryCount += 1;
            }

            _userRepo.Update(user);

            if (!_userRepo.SaveChanges()) Task.FromResult(false);

            return Task.FromResult(result);
        }

        public Task<bool> ChangeStatus(int userId, int updatedBy, bool isActive)
        {
            if (userId < 1 || updatedBy < 1) return Task.FromResult(false);

            var user = _userRepo.FindOne(x => x.Id == userId);
            if (user == null) return Task.FromResult(false);

            var updatedByUser = _userRepo.FindOne(x => x.Id == updatedBy);
            if (updatedByUser == null) return Task.FromResult(false);

            user.UpdatedAt = DateTime.Now;
            user.UpdatedBy = updatedBy;
            user.IsActive = !isActive;
            _userRepo.Update(user);

            if (!_userRepo.SaveChanges()) Task.FromResult(false);

            return Task.FromResult(true);
        }

        public Task<User> Get(int id)
        {  
            var user = _userRepo.FindOne(x => x.Id == id);
            return Task.FromResult(user);
        }

        public Task<User> GetByEmail(string email)
        {
            if (!email.IsEmail()) return null;
            
            var user = _userRepo.FindOne(x => x.Email == email);
            return Task.FromResult(user);
        }


        public async Task<bool> RequestPasswordReset(ItemRequestModel model)
        {
            if (await DoesEmailExists(new ItemRequestModel { Text = model.Text }))
            {
                var member = _memberRepository.GetSingle(x => x.Email == model.Text);
                if (member.PasswordResetRequestedOn == null ||
                   (member.PasswordResetRequestedOn != null && member.PasswordResetRequestedOn.Value.AddSeconds(15) < DateTime.Now))
                {
                    var token = Guid.NewGuid().ToString().Replace("-", string.Empty);
                    var updateResult = _memberRepository.Update(Query.And(Query<Member>.EQ(x => x.Email, model.Text),
                                                                          Query<Member>.EQ(x => x.DeletedOn, null)),
                                                                Update<Member>.Set(x => x.PasswordResetToken, token)
                                                                              .Set(x => x.PasswordResetRequestedOn, DateTime.Now)
                                                                              .Set(x => x.UpdatedOn, DateTime.Now)
                                                                              .Set(x => x.UpdatedBy, ConstHelper.System));
                    if (updateResult.Ok)
                    {
                        ;
                        _messagingService.SendMail(new MsgSendMailReqModel
                        {
                            ApiKey = model.ApiKey,
                            Email = model.Text,
                            Body = string.Format(Resource.PasswordResetMailContent,
                                                 string.Format("{0}?email={1}&token={2}",
                                                               Resource.PasswordResetRoute,
                                                               model.Text, token)),
                            Subject = Resource.PasswordResetMailSubject,
                            MemberId = model.MemberId
                        });

                        return await Task.FromResult(true);
                    }
                }
            }

            return await Task.FromResult(false);
        }

        public async Task<bool> IsPasswordResetRequestValid(string email, string token)
        {
            return false;
            //return await Task.FromResult(_memberRepository.AsQueryable()
            //                        .Any(x => x.Email == model.Email
            //                               && x.PasswordResetToken == model.Token
            //                               && x.PasswordResetRequestedOn >= DateTime.Now.AddHours(-1)));
        }

        public async Task<bool> ChangePassword(MemberChangePasswordRequestModel model)
        {
            if (await IsPasswordResetRequestValid(new MemberIsPasswordResetRequestValidRequestModel { ApiKey = model.ApiKey, Email = model.Email, Token = model.Token }))
            {
                var updateResult = _memberRepository.Update(Query.And(Query<Member>.EQ(x => x.Email, model.Email),
                                                                      Query<Member>.EQ(x => x.DeletedOn, null)),
                                                             Update<Member>.Set(x => x.PasswordResetToken, null)
                                                                              .Set(x => x.PasswordResetRequestedOn, null)
                                                                              .Set(x => x.PasswordHash, BCrypt.Net.BCrypt.HashPassword(model.NewPassword, BCrypt.Net.BCrypt.GenerateSalt(12)))
                                                                              .Set(x => x.UpdatedOn, DateTime.Now)
                                                                              .Set(x => x.UpdatedBy, ConstHelper.System));

                if (updateResult.Ok)
                {
                    return await Task.FromResult(true);
                }
            }

            return await Task.FromResult(false);
        }


        //public Task<List<User>> GetAll()
        //{
        //    var users = _userRepo.FindAll().ToList();
        //    return Task.FromResult(users);
        //}

        //public Task<List<User>> GetAllByRoleId(int roleId)
        //{
        //    var users = _userRepo.FindAll(x => x.RoleId == roleId).ToList();
        //    return Task.FromResult(users);
        //}




        
    }
}